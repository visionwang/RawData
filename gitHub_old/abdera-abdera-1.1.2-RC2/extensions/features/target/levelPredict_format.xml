<?xml version="1.0" encoding="UTF-8"?>

<project projectInfo="org.apache.abdera:abdera-extensions-features:1.1.2@D:\ws\final_3\gitHub_old\abdera-abdera-1.1.2-RC2\extensions\features\pom.xml">
  <conflicts type="jar">
    <conflict groupId-artifactId="commons-codec:commons-codec" versions="1.4/1.2" riskLevel="1">
      <versions>
        <version versionId="1.4" loaded="true">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-core:1.1.2::compile + commons-codec:commons-codec:1.4::compile</path>
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-core:1.1.2::compile + org.apache.abdera:abdera-i18n:1.1.2::compile + commons-codec:commons-codec:1.4::compile</path>
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + commons-codec:commons-codec:1.4::compile</path>
        </version>
        <version versionId="1.2" loaded="false">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + commons-httpclient:commons-httpclient:3.1::compile + commons-codec:commons-codec:1.2::compile</path>
        </version>
      </versions>
      <RiskMethods tip="method that may be used but will not be loaded !"/>
    </conflict>
    <conflict groupId-artifactId="commons-logging:commons-logging" versions="1.0.4/1.1.1" riskLevel="1">
      <versions>
        <version versionId="1.1.1" loaded="false">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + org.apache.ws.commons.axiom:axiom-impl:1.2.10::compile + commons-logging:commons-logging:1.1.1::compile</path>
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + commons-httpclient:commons-httpclient:3.1::compile + commons-logging:commons-logging:1.1.1::compile</path>
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + org.apache.ws.commons.axiom:axiom-impl:1.2.10::compile + org.apache.ws.commons.axiom:axiom-api:1.2.10::compile + commons-logging:commons-logging:1.1.1::compile</path>
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + commons-logging:commons-logging:1.1.1::runtime</path>
        </version>
        <version versionId="1.0.4" loaded="true">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-core:1.1.2::compile + commons-logging:commons-logging:1.0.4::compile</path>
        </version>
      </versions>
      <RiskMethods tip="method that may be used but will not be loaded !"/>
    </conflict>
    <conflict groupId-artifactId="org.codehaus.woodstox:wstx-asl" versions="3.2.6/3.2.9" riskLevel="4">
      <versions>
        <version versionId="3.2.9" loaded="false">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + org.apache.ws.commons.axiom:axiom-impl:1.2.10::compile + org.codehaus.woodstox:wstx-asl:3.2.9::runtime</path>
        </version>
        <version versionId="3.2.6" loaded="true">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + org.codehaus.woodstox:wstx-asl:3.2.6::runtime</path>
        </version>
      </versions>
      <RiskMethods tip="method that may be used but will not be loaded !">
        <RiskMthd>com.ctc.wstx.compat.QNameCreator: javax.xml.namespace.QName create(java.lang.String,java.lang.String,java.lang.String)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.FullDTDReader: char dtdNextFromCurr()</RiskMthd>
        <RiskMthd>com.ctc.wstx.sw.NonNsStreamWriter: void throwFromIOE(java.io.IOException)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.MinimalDTDReader: void initInputSource(com.ctc.wstx.io.WstxInputSource,boolean)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.FullDTDReader: void skipComment()</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.FullDTDReader: com.ctc.wstx.io.WstxInputLocation getLastCharLocation()</RiskMthd>
        <RiskMthd>com.ctc.wstx.compat.QNameCreator: void clinit ()</RiskMthd>
        <RiskMthd>com.ctc.wstx.sr.ValidatingStreamReader: boolean hasConfigFlags(int)</RiskMthd>
        <RiskMthd>com.ctc.wstx.api.WriterConfig: boolean automaticEndElementsEnabled()</RiskMthd>
        <RiskMthd>com.ctc.wstx.compat.QNameCreator$Helper: void init ()</RiskMthd>
        <RiskMthd>com.ctc.wstx.sr.ValidatingStreamReader: com.ctc.wstx.sr.InputElementStack createElementStack(com.ctc.wstx.api.ReaderConfig)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.FullDTDReader: java.net.URL getSource()</RiskMthd>
        <RiskMthd>com.ctc.wstx.compat.QNameCreator$Helper: javax.xml.namespace.QName create(java.lang.String,java.lang.String,java.lang.String)</RiskMthd>
        <RiskMthd>com.ctc.wstx.sw.NonNsStreamWriter: void reportNwfStructure(java.lang.String)</RiskMthd>
        <RiskMthd>com.ctc.wstx.sr.BasicStreamReader: boolean isSpaceChar(char)</RiskMthd>
        <RiskMthd>com.ctc.wstx.sw.BaseNsStreamWriter: void reportNwfStructure(java.lang.String)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.FullDTDReader: boolean isSpaceChar(char)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.FullDTDReader: boolean isNameStartChar(char)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dtd.FullDTDReader: com.ctc.wstx.ent.EntityDecl expandEntity(java.lang.String,boolean,java.lang.Object)</RiskMthd>
        <RiskMthd>com.ctc.wstx.sax.WstxSAXParser$ResolverProxy: java.lang.Object resolveEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.String)</RiskMthd>
        <RiskMthd>com.ctc.wstx.sr.StreamScanner: java.lang.String getCharDesc(char)</RiskMthd>
        <RiskMthd>com.ctc.wstx.dom.DOMWrappingReader: void coalesceText(int)</RiskMthd>
      </RiskMethods>
    </conflict>
    <conflict groupId-artifactId="xml-apis:xml-apis" versions="1.3.04/1.3.02" riskLevel="1">
      <versions>
        <version versionId="1.3.02" loaded="false">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + jaxen:jaxen:1.1.1::compile + xml-apis:xml-apis:1.3.02::compile</path>
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + jaxen:jaxen:1.1.1::compile + xerces:xercesImpl:2.6.2::compile + xml-apis:xml-apis:1.3.02::compile</path>
        </version>
        <version versionId="1.3.04" loaded="true">
          <path>xml-apis:xml-apis:1.3.04::compile</path>
        </version>
      </versions>
      <RiskMethods tip="method that may be used but will not be loaded !"/>
    </conflict>
    <conflict groupId-artifactId="xerces:xercesImpl" versions="2.9.1/2.6.2" riskLevel="1">
      <versions>
        <version versionId="2.6.2" loaded="false">
          <path>org.apache.abdera:abdera-extensions-features:1.1.2:: + org.apache.abdera:abdera-client:1.1.2::compile + org.apache.abdera:abdera-parser:1.1.2::compile + jaxen:jaxen:1.1.1::compile + xerces:xercesImpl:2.6.2::compile</path>
        </version>
        <version versionId="2.9.1" loaded="true">
          <path>xerces:xercesImpl:2.9.1::compile</path>
        </version>
      </versions>
      <RiskMethods tip="method that may be used but will not be loaded !"/>
    </conflict>
  </conflicts>
</project>
