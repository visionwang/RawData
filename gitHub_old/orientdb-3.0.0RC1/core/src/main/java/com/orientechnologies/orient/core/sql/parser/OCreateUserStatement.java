/* Generated By:JJTree: Do not edit this line. OCreateUserStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=O,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.orientechnologies.orient.core.sql.parser;

import com.orientechnologies.orient.core.command.OCommandContext;
import com.orientechnologies.orient.core.sql.executor.OResultSet;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class OCreateUserStatement extends OSimpleExecStatement {

  private static final String USER_FIELD_NAME     = "name";
  private static final String USER_FIELD_PASSWORD = "password";
  private static final String USER_FIELD_STATUS   = "status";
  private static final String USER_FIELD_ROLES    = "roles";

  private static final String DEFAULT_STATUS  = "ACTIVE";
  private static final String DEFAULT_ROLE    = "writer";
  private static final String ROLE_CLASS      = "ORole";
  private static final String ROLE_FIELD_NAME = "name";

  public OCreateUserStatement(int id) {
    super(id);
  }

  public OCreateUserStatement(OrientSql p, int id) {
    super(p, id);
  }

  protected OIdentifier name;
  protected OIdentifier passwordIdentifier;
  protected String      passwordString;

  protected List<OIdentifier> roles = new ArrayList<>();

  @Override
  public OResultSet executeSimple(OCommandContext ctx) {

    List<Object> params = new ArrayList<>();
    // INSERT INTO OUser SET
    StringBuilder sb = new StringBuilder();
    sb.append("INSERT INTO OUser SET ");

    sb.append(USER_FIELD_NAME);
    sb.append("=?");
    params.add(this.name.getStringValue());

    // pass=<pass>
    sb.append(',');
    sb.append(USER_FIELD_PASSWORD);
    sb.append("=");
    if (passwordString != null) {
      sb.append(passwordString);
    } else {
      sb.append("?");
      params.add(passwordIdentifier.getStringValue());
    }

    // status=ACTIVE
    sb.append(',');
    sb.append(USER_FIELD_STATUS);
    sb.append("='");
    sb.append(DEFAULT_STATUS);
    sb.append("'");

    // role=(select from ORole where name in [<input_role || 'writer'>)]
    List<OIdentifier> roles = new ArrayList<>();
    roles.addAll(this.roles);
    if (roles.size() == 0) {
      roles.add(new OIdentifier(DEFAULT_ROLE));
    }

    sb.append(',');
    sb.append(USER_FIELD_ROLES);
    sb.append("=(SELECT FROM ");
    sb.append(ROLE_CLASS);
    sb.append(" WHERE ");
    sb.append(ROLE_FIELD_NAME);
    sb.append(" IN [");
    for (int i = 0; i < this.roles.size(); ++i) {
      if (i > 0) {
        sb.append(", ");
      }
      String role = roles.get(i).getStringValue();
      if (role.startsWith("'") || role.startsWith("\"")) {
        sb.append(this.roles.get(i));
      } else {
        sb.append("'");
        sb.append(this.roles.get(i));
        sb.append("'");
      }
    }
    sb.append("])");
    return ctx.getDatabase().command(sb.toString(), params.toArray());
  }

  @Override
  public void toString(Map<Object, Object> params, StringBuilder builder) {
    builder.append("CREATE USER ");
    name.toString(params, builder);
    builder.append(" IDENTIFIED BY ");
    if (passwordIdentifier != null) {
      passwordIdentifier.toString(params, builder);
    } else {
      builder.append(passwordString);
    }
    if (!roles.isEmpty()) {
      builder.append("ROLE [");
      boolean first = true;
      for (OIdentifier role : roles) {
        if (!first) {
          builder.append(", ");
        }
        role.toString(params, builder);
        first = false;
      }
      builder.append("]");
    }
  }

  @Override
  public OCreateUserStatement copy() {
    OCreateUserStatement result = new OCreateUserStatement(-1);
    result.name = name == null ? null : name.copy();
    result.passwordIdentifier = passwordIdentifier == null ? null : passwordIdentifier.copy();
    result.passwordString = passwordString;
    roles.forEach(x -> result.roles.add(x.copy()));
    return result;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o)
      return true;
    if (o == null || getClass() != o.getClass())
      return false;

    OCreateUserStatement that = (OCreateUserStatement) o;

    if (name != null ? !name.equals(that.name) : that.name != null)
      return false;
    if (passwordIdentifier != null ? !passwordIdentifier.equals(that.passwordIdentifier) : that.passwordIdentifier != null)
      return false;
    if (passwordString != null ? !passwordString.equals(that.passwordString) : that.passwordString != null)
      return false;
    return roles != null ? roles.equals(that.roles) : that.roles == null;
  }

  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (passwordIdentifier != null ? passwordIdentifier.hashCode() : 0);
    result = 31 * result + (passwordString != null ? passwordString.hashCode() : 0);
    result = 31 * result + (roles != null ? roles.hashCode() : 0);
    return result;
  }
}
/* JavaCC - OriginalChecksum=d1f22e2468eaf740d8ccc90ebbe2c185 (do not edit this line) */
